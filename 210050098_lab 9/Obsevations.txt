Moningi Srija
Roll no.: 210050098
Python-Warmup
Problem 1

General
	-> there is no need of main function
	-> there is no need to specify data type as we did in c++
	-> this language python is object oriented
	-> it is a high-level language, writing commands feels very similar to english sentences
	-> it is a interpreted language
	-> here indentation is used in place of blocks and this makes the code look clean
	-> variables here can start with a letter or underscore but not a number
	-> semicolons are not needed in python

print
    -> similar to cout in c++
	-> we can also append 2 statements and print them
	-> there are some key-word arguments like sep and end
	-> default for sep is space and for end is \n
	-> we can change them according to our necessity

lists
	-> printing list is very easy compared to printing elements of array in c++
	-> sets are declared with elements specified in square brackets "[]""
	-> lists can be easily joined

Conditional
	-> indentation has much importance here in python
	-> ":" is added at the end of if or else
	-> we can simply write if a<b: without having small brackets aroun the condition in if

for loop
	-> for loop here directly checks the value, there is no involvance of index
	-> the syntax "for n in l" is similar to english
	-> range(x,y,z) consist of values from x to y-1 maintaining a gap of z
	-> ranges are useful in writing condition of for loop
	-> here for also has an else like if has 
	-> when loop breaks else also doesn't run
	-> we can nest for loops

while
	-> condition can be passed in while loop without small brackets
	-> else can also be used with while loop

sets
	-> sets are declared with elements specified in curly brackets "{}" 
	-> there are operators defined for finding union, intersection, difference and symmetric difference
	-> sets and lists are interconvertible

functions
	-> functions can be defined 

logical operators
	-> logical operators are same

Identity
	-> in class we observed that for the case
		l1 = [1, 2, 3]
		l2 = l
	   l1 and l2 are identical and l1 == l2 returns true

	   but for the case
	    l1 = [1, 2, 3] 
	    l2 = [1, 2, 3]
	    l1 and l2 are not considered identical  and l1 == l2 returns false

List Slicing
	-> this is flexible and easy to use
	-> indexing starts from 0 and increases by 1 as we move right
	-> indexing starts from -1 and decreases by 1 as we move left
	-> in the syntax [x:y:z] if nothing is specified for y it goes until last element

Member Based Iterations
Append and Remove on lists
	-> remove takes the value as argument and removes it
	-> pop takes the index as the argument and removes it 
	-> pop also returns the value removed

Higher Order Functions
	-> here functions can be passed as arguments into functions

Python is a very flexible language 

