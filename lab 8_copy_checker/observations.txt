----------------------------------------------------------------------------------------------Lab 8------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------Modularization and Reuse----------------------------------------------------------------------------------------------

 Roll no.210050098
 Moningi Srija

 reusable.cpp
 
 	-> this file contains an abstract class with variables and some functions.
 	-> most of these are used in common among 3 variants
 	-> declared and defined some variables which will be used in common to the 3 variants made
 	-> declared arrays of struct word to store the information related to it in that.
 	-> it contains all the analyse functions
 	
 impl1.cpp
 
 	-> the first variant 
 	-> very primitive code
 	-> it checks if word 1 of f1 = word 1 of f2 and so on
 	-> if yes it adds 1 to sim
 	-> totalnum will be updated as we move along both the files until both get closed
 	-> the basis for similarity check is 100*(sim/totnum)
 	
 impl2.cpp
 
 	-> the second variant
 	-> here the strategy is different and this is a better way to check than impl1
 	-> here all the words of each files are stored into the array as element word of struct
 	-> a bool variable is defined in each struct 
 	-> in f1 if a word gets repeated in the same variable then only the first occurence has the bool variable set to false and all the others have it true
 	-> which indicaes that it is a repeated word, so bool rword kind of acts like a switch
 	-> now the words (after removing effect of multi occurence) get compared to all the words in second file one by one 
 	-> and each time a match occurs variable sim gets updated and the criteria will be 100*(sim)/(max(numf1,numf2))
 	-> by usig this strategy we can check even though spaces are involved
 	
 impl3.cpp
 
 	-> the 3rd variant
 	-> here the strategy is to store th number of entries of each word in the struct associated with it
 	-> and compare them 
 	-> everytime a word matches in two files sim gets updated with (10*(min(aw.w1[i].nword, aw.w2[j].nword))/(max(aw.w1[i].nword, aw.w2[j].nword)))
 	-> the criteria is (10*sim/max(numword1,numword2))
 	
 assert
 	
 	-> used assert statements in 3 variants to ensure that they are closed at the end
 	-> assert statement at line 26, 29 of impl1.cpp for defense
 	-> assert statements at line 37, 41, 47, 54, 61 of impl2 for defense
 	-> assert statements at line line 40, 46, 62 of impl3 for defense
 	
 
