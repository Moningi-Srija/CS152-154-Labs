Moningi Srija
Roll no. 210050098

------------------------------------------------------------------------------problem 1------------------------------------------------------------------------
--------------------------------------------------------------------------Sentence Generator-------------------------------------------------------------------
Process  
	-> took all words into lists from the files
	-> divided the subjects into two grps according to the verb they needed gramatically
	-> I, You, We, They as part a as they need verb to be in plural for simple present tense
	-> He, She, It as part b as they need verb to be in singular for simple present tense
	-> verbs are written in verb.txt file with clear headings for present and past
	-> to maintain uniformity while creating 2D list a, extended lists to len 7 adding "" as extra elements

	New Ideas developed during the process of coding for this prblm
		-> reduced the redundancy of the driver code by creating a function orderfun()
		-> categorised the sentences into 3 tenses and explicitly printed heading for each tense

	Driver Code
		-> creates a list of lists with sub, verb, obj according to the case and calls the function with appropriate arguments
	Print Sentence Helper
		-> the function printsenhelper creates an list result to store the sentence (list of sub, ver, obj) for it
		-> words in the row 1 are considered as starting points and sentences get printed
		-> calls printsen function
	Print Sentence
		-> adds current word to output array
		Base Case
			-> print if the word added is the last word
		-> and carries the recursion

Flexibility of code
	-> verbs are written in verb.txt file with clear headings for present and past, we can also add a seperate heading for future if needed and create a list  for it
	-> this makes the code more flexible since verbs whose v2 form is not just +ed form of v1 can also be used as we are writing the seperately 
	-> the code supports e.g eat, ate also along with e.g cook, cooked
	-> extra words can be added in the sub.txt, verb.txt and obj.txt files

----------------------------------------------------------------------------problem 2--------------------------------------------------------------------------
-------------------------------------------------------------------Sentence Generator Modified-----------------------------------------------------------------
Modifications or Extension
	-> prints compound sentences of 2 types
	Type 1
		-> uses multiple verbs
	Type 2
		-> uses multiple objects

Modifications in code
	-> created new lists to store the compound verbs and objects
	-> using the pre-existing lists of verbs and objects

Flexibility
	-> this code can be used for more number of verbs and objects also by maing small changes in the creating lists part
	-> that is slicing of lists should be done accordingly
	-> used only 2 verbs and 2 objects for now for simplicity 

---------------------------------------------------------------------problem 3_iteration-----------------------------------------------------------------------
----------------------------------------------------------------Permutations using iteration-------------------------------------------------------------------
-> used factorial to stop the process by noting the number of permutations happened so far with variable num
-> assuming lements of a list are placed on a circle and wrote the permutations by changing the starting point
-> swapping two elements and continuing the same proces
-> swapping should not be b/w the last 2 in the cycle because it causes repitions as it will get identical to first case where no swapping is done
-> for printing the lists in cyclic manner for loop and list slicing are used

---------------------------------------------------------------------problem 3_recursive-----------------------------------------------------------------------
----------------------------------------------------------------Permutations using recursion-------------------------------------------------------------------
factorial
	-> just to print the number of permutations possible at the end
permutation(l,lft,rgt)
	-> lft is leftmost and right is rightmost index l is the list

	Base Case
		-> lft == rgt which implies that recursion reached the end and prints the list
		-> elements get swapped and we move one step further in recursion 
		-> to avoid the repetioins we redo the swapping so that we only get the final steps in the process gets printed and not the intermediate steps
		-> which cause repetioins

Interface for 2 cases in problem 3
	-> number of elements are taken first from the user
	-> and then the elements one by one are taken and get appended
	

